--Create a new table on the database and insert some values into it.

	CREATE TABLE cricket(
	cust_id INTEGER PRIMARY KEY,
	cust_Fname CHARACTER VARYING(150),
	cust_Sname CHARACTER VARYING(150)
	);

	SELECT * FROM cricket;

	INSERT INTO cricket 
	VALUES
	(18,'Virat','Kohli'),
	(11,'Md','Shami'),
	(45,'Rohit','Sharma'),
	(12,'Yuvraj','Singh'),
	(10,'Sachin','Tendulkar'),
	(07,'MS','Dhoni');

	TRUNCATE TABLE cricket;
--Find the name whose id is 18.

	SELECT CONCAT(cust_Fname,' ',cust_Sname)FROM cricket
	WHERE cust_id=18;

	SELECT COUNT(*) FROM cricket;
--Drop the entire table.
	
	DROP TABLE cricket;

--View each column and find out Primary key.
	SELECT * FROM album; --album_id
	SELECT * FROM artist; --artist_id
	SELECT * FROM customer; --customer_id
	SELECT * FROM employee; --employee_id
	SELECT * FROM genre; --genre_id
	SELECT * FROM invoice; --invoice_id
	SELECT * FROM invoice_line; --invoice_line_id
	SELECT * FROM media_type; --media_type_id
	SELECT * FROM playlist; --playlist_id
	SELECT * FROM playlist_track;
	SELECT * FROM track; --track_id

--Find out the id and fullName of the customers.
	SELECT customer_id, CONCAT(first_name,'',last_name) as "FullName"
	FROM customer
	ORDER BY customer_id ASC;

--Find the number of music genre from ROCK & JAZZ.
	SELECT COUNT(name)FROM genre
	WHERE name IN ('Rock','Jazz'); --2

--Find the count of records from India.
	SELECT COUNT(*),billing_country FROM invoice
	GROUP BY billing_country
	HAVING billing_country='India'; --21

--Find total number of tracks and sort them in descending order.
	SELECT track_id, COUNT(track_id) FROM playlist_track
	GROUP BY track_id
	ORDER BY COUNT(track_id) DESC;

--Find the senior most employee based on job title.
	SELECT title, last_name, first_name 
	FROM employee
	ORDER BY levels DESC
	LIMIT 1

--Find countries have the most Invoices.
	SELECT COUNT(*) AS c, billing_country 
	FROM invoice
	GROUP BY billing_country
	ORDER BY c DESC

--Find top 3 values of total invoice.
	SELECT total 
	FROM invoice
	ORDER BY total DESC

--Find out the null values(if any) and name starts with A of track composers.
	SELECT * FROM track
	WHERE composer IS NULL AND composer ILIKE 'A%'; --NO such values

--Which city has the best customers? We would like to throw a promotional Music Festival in the city we made the most money. 
  Write a query that returns one city that has the highest sum of invoice totals. 
  Return both the city name & sum of all invoice totals.
	SELECT billing_city,SUM(total) AS InvoiceTotal
	FROM invoice
	GROUP BY billing_city
	ORDER BY InvoiceTotal DESC
	LIMIT 1;

--Who is the best customer? The customer who has spent the most money will be declared the best customer. 
  Write a query that returns the person who has spent the most money.
	SELECT customer.customer_id, first_name, last_name, SUM(total) AS total_spending
	FROM customer
	JOIN invoice ON customer.customer_id = invoice.customer_id
	GROUP BY customer.customer_id
	ORDER BY total_spending DESC
	LIMIT 1;

--Write query to return the email, first name, last name, & Genre of all Rock Music listeners. 
  Return your list ordered alphabetically by email starting with A.
SELECT DISTINCT email,first_name, last_name
FROM customer
JOIN invoice ON customer.customer_id = invoice.customer_id
JOIN invoice_line ON invoice.invoice_id = invoice_line.invoice_id
WHERE track_id IN(
	SELECT track_id FROM track
	JOIN genre ON track.genre_id = genre.genre_id
	WHERE genre.name LIKE 'Rock'
)
ORDER BY email;

--Let's invite the artists who have written the most rock music in our dataset. 
  Write a query that returns the Artist name and total track count of the top 10 rock bands.
	SELECT artist.artist_id, artist.name,COUNT(artist.artist_id) AS number_of_songs
	FROM track
	JOIN album ON album.album_id = track.album_id
	JOIN artist ON artist.artist_id = album.artist_id
	JOIN genre ON genre.genre_id = track.genre_id
	WHERE genre.name LIKE 'Rock'
	GROUP BY artist.artist_id
	ORDER BY number_of_songs DESC
	LIMIT 10;

--Return all the track names that have a song length longer than the average song length. 
  Return the Name and Milliseconds for each track. Order by the song length with the longest songs listed first.
	SELECT name, milliseconds
	FROM track
	WHERE milliseconds > (
		SELECT AVG(milliseconds) AS avg_track_length
		FROM track 
	)
	ORDER BY milliseconds DESC;





THANK YOU!!!